using System;
using System.Collections.Generic;
using System.Text;
using System.IO;

namespace TP_03.Repositorio
{
    // essa classe tem que ser estática, para poder usar sem instanciar (usar o new)
    public static class RepositorioPessoa
    {
        // deve ser private para que nada fora daqui acesse ela
        private static List<Pessoa> AniversarioList = new List<Pessoa>();


        public static void CriarPessoa(StringBuilder csv)
        {
            Console.Write("Digite o seu nome: ");
            string nome = Console.ReadLine();
            csv.AppendLine(nome);
            Console.Write("Digite o seu sobrenome: ");
            string sobrenome = Console.ReadLine();
            csv.AppendLine(sobrenome);
            Console.WriteLine("Agora,informe a data do seu próximo aniversário ,que iremos calcular quantos dias faltam. ");
            DateTime aniversario = DateTime.Parse(Console.ReadLine());
            csv.AppendLine(Convert.ToString(aniversario));
            Pessoa aniversariante = new Pessoa(nome, sobrenome, aniversario);
            EscreverArquivo(aniversariante);
            AniversarioList.Add(aniversariante);
            aniversariante.CalcularQuantosDiasFaltam();

            Console.WriteLine("***************************************");
        }

        //tem que ser publica
        public static void BuscarPessoa()
        {

            var diretorio = "dir";
            var nomeArquivo = "aniversarios.csv";
            var caminhoArquivo = Path.Combine(diretorio, nomeArquivo);
            var linhas = File.ReadAllLines(caminhoArquivo);


            Console.Write("Digite o nome da pessoa que deseja pesquisar: ");
            var pesquisaNome = Console.ReadLine();
            Console.Write("Digite o sobrenome da pessoa que deseja pesquisar: ");
            var pesquisaSobrenome = Console.ReadLine();

            foreach (Pessoa x in AniversarioList)     // Para cada objeto Pessoa adicionado na lista
            {
                if (pesquisaNome == x.Nome && pesquisaSobrenome == x.Sobrenome)
                {
                    Console.WriteLine($"Olá , {x.Nome} {x.Sobrenome} "); x.CalcularQuantosDiasFaltam();

                }
            }

        }

        public static void DeletarPessoa()
        { 
             var diretorio = "dir";
             var nomeArquivo = "aniversarios.csv";
             var caminhoArquivo = Path.Combine(diretorio, nomeArquivo);
             var linhas = File.ReadAllLines(caminhoArquivo);

             Console.Write("Digite o nome da pessoa que deseja pesquisar: ");
             var pesquisaNome = Console.ReadLine();
             Console.Write("Digite o sobrenome da pessoa que deseja pesquisar: ");
             var pesquisaSobrenome = Console.ReadLine();

            foreach (Pessoa x in AniversarioList)          // Para cada objeto Pessoa adicionado na lista
            {
                if (pesquisaNome == x.Nome && pesquisaSobrenome == x.Sobrenome)
                {
                    Console.WriteLine("Deseja apagar esses dados? (S/N) ");
                    var opcao = Console.ReadLine();
                    Console.WriteLine(x.Nome);
                    Console.WriteLine(x.Sobrenome);
                    Console.WriteLine(x.DiaAniversario);

                    if (opcao == "S")
                    {
                        AniversarioList.Remove(x);
                    }
                    else
                    {
                        Console.WriteLine("Operação Cancelada");
                    };

                }
            }
        }

        public static void EditarPessoa()
        {

            BuscarPessoa();
            Console.WriteLine("Informe os novos dados");
            Console.Write("Digite o nome da pessoa: ");
            var nomeAtualizado = Console.ReadLine();
            Console.Write("Digite o sobrenome da pessoa: ");
            var sobrenomeAtualizado = Console.ReadLine();
            Console.Write("Digite o próximo aniversário da pessoa: ");
            DateTime aniversarioAtualizado = DateTime.Parse(Console.ReadLine());

            {
                foreach (Pessoa aniversariante in AniversarioList)
                {

                    aniversariante.Nome = nomeAtualizado;
                    aniversariante.Sobrenome = sobrenomeAtualizado;
                    aniversariante.DiaAniversario = aniversarioAtualizado;
                    break;

                }
            }

        }

        public static void EscreverArquivo(Pessoa pessoa)
        {
            #region Diretorio
            var diretorio = "dir";
            Directory.CreateDirectory(diretorio);

            #endregion
            var csv = new StringBuilder();

            string aniversariante = ($"{pessoa.Nome};{pessoa.Sobrenome};{pessoa.DiaAniversario}\n");

            csv.AppendLine(aniversariante);
            #region  Arquivo
            var nomeArquivo = "aniversarios.csv";
            var caminhoArquivo = Path.Combine(diretorio, nomeArquivo);
            File.AppendAllText(caminhoArquivo, csv.ToString());

            //File.AppendAllLines(caminhoArquivo);



            #endregion


        }

        public static void LerArquivo()
        {
            var diretorio = "dir";
            var nomeArquivo = "aniversarios.csv";
            var caminhoArquivo = Path.Combine(diretorio, nomeArquivo);
            var linhas = File.ReadAllLines(caminhoArquivo);


            foreach (var linha in linhas)
            {
                string nome = " ";
                string sobrenome = " ";
                DateTime aniversario = new DateTime();
                Pessoa aniversariante = new Pessoa(nome, sobrenome, aniversario);


                AniversarioList.Add(aniversariante);

            }

            foreach (var amigo in AniversarioList)
            {
                Console.WriteLine(amigo.Nome);
                Console.WriteLine(amigo.Sobrenome);
                Console.WriteLine(amigo.DiaAniversario);
                Console.WriteLine("******************");
                
            }
           
        }
    }
}
     
